function times(n) {
  return Array.apply(null, new Array(n));
}

function seq(e, i) {
  return i + 3;
}

function seqDates(e, i) {
  return i + 2000;
}

function seqDatesFuture(e, i) {
  return i + 2018;
}

function random() {
  return Math.ceil(Math.random() * (60 - 30 + 1) + 30);
}

// OLD MOBILE
if (window.innerWidth < 320) {
  var seriesCount = 3;
}
// MOBILE
else if (window.innerWidth < 700) {
  var seriesCount = 6;
}
// TABLET
else if (window.innerWidth < 991) {
  var seriesCount = 10;
}
// DESKTOP
else {
  var seriesCount = 18;
}

// OLD MOBILE
if (window.innerWidth < 320) {
  var screenOptions = {
    labels: [2017, 2018, 2019, 2020, 2021],
    series: [
      [], [],
      [1, 3, 2, null, null],
      [null, null, 2, 4.5, 5]]
  }
}
// MOBILE
else if (window.innerWidth < 700) {
  var screenOptions = {
    labels: [2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023],
    series: [
      [], [],
      [1, 3, 2.5, null, null, null, null, null],
      [null, null, 2.5, 5, 4, 6, 7, 9]]
  }
}
// TABLET
else if (window.innerWidth < 991) {
  var screenOptions = {
    labels: [2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025],
    series: [
      [], [],
      [1, 3, 2.5, null, null, null, null, null, null, null],
      [null, null, 2.5, 5, 4, 6, 7, 9, 5, 6]]
  }
}
// DESKTOP
else {
  var screenOptions = {
    labels: [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026],
    series: [
      [], [],
      [1, 2, 3, 3.5, 2, 2.5, 4, null, null, null, null, null, null, null, null, null],
      [null, null, null, null, null, null, 4, 5, 4, 6, 7, 9, 5, 6, 6.5, 7]]
  }
}

! function () {
  const e = document.documentElement;
  if (e.classList.remove("no-js"), e.classList.add("js"), document.body.classList.contains("has-animations")) {
    const e = window.sr = ScrollReveal();
    e.reveal(".hero-title, .hero-paragraph, .newsletter-header, .newsletter-form", {
      duration: 1e3,
      distance: "40px",
      easing: "cubic-bezier(0.5, -0.01, 0, 1.005)",
      origin: "bottom",
      interval: 150
    }), e.reveal(".hero-browser-inner", {
      delay: 500,
      duration: 1e3,
      scale: .95,
      easing: "cubic-bezier(0.5, -0.01, 0, 1.005)",
      interval: 15,
      viewFactor: 1.0,
      viewOffset: {
        bottom: 260
      },
      beforeReveal: function (el) {
        var termynal = new Termynal('#termynal')
      },
      afterReveal: function (el) {
        setTimeout(function () {

          var chart = new Chartist.Line('.ct-chart', {
            labels: times(seriesCount).map(seqDates),
            series: [
              times(seriesCount).map(random),
              times(seriesCount).map(random)
            ]
          }, {
              fullWidth: true,
              high: 70,
              low: 20,
              width: '96%',
              showArea: true,
              showLine: true,
              axisX: {
                showLabel: true,
                offset: 15
              },
              axisY: {
                showGrid: false,
                showLabel: false,
                offset: 23
              }
            });

          var seq = 0;

          chart.on('created', function () {
            seq = 0;
          });

          chart.on('draw', function (data) {
            if (data.type === 'line' || data.type === 'area') {
              data.element.animate({
                d: {
                  begin: 2000 * data.index,
                  dur: 2000,
                  from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),
                  to: data.path.clone().stringify(),
                  easing: Chartist.Svg.Easing.easeOutQuint
                }
              });
            }
            if (data.type === 'point') {
              seq++;

              data.element.animate({
                x1: {
                  from: data.x - 50,
                  to: data.x,
                  begin: seq * 50,
                  dur: 800,
                  easing: Chartist.Svg.Easing.easeOutQuint
                },
                opacity: {
                  from: 0,
                  to: 1,
                  begin: seq * 60,
                  dur: 300,
                }
              });
            }
          });

          chart.on('created', function () {
            if (window.__exampleAnimateTimeout) {
              clearTimeout(window.__exampleAnimateTimeout);
              window.__exampleAnimateTimeout = null;
            }
            setTimeout(function () {
              var termynal = new Termynal('#termynal')
            }, 5000);
            window.__exampleAnimateTimeout = setTimeout(chart.update.bind(chart), 10470);
          });

        }, 4000);
      }
    }), e.reveal(".bubble-3, .bubble-4, .bubble-1, .bubble-2", {
      duration: 1e3,
      scale: .95,
      easing: "cubic-bezier(0.5, -0.01, 0, 1.005)",
      interval: 15,
      viewFactor: 0.5
    }), e.reveal(".hero-browser-inner2", {
      duration: 1e3,
      scale: .95,
      easing: "cubic-bezier(0.5, -0.01, 0, 1.005)",
      interval: 15,
      viewFactor: 1.0,
      viewOffset: {
        bottom: 360
      },
      beforeReveal: function (el) {
        var termynal = new Termynal('#termynal2')
      },
      afterReveal: function (el) {

        setTimeout(function () {

          var chart_re = new Chartist.Line('.ct-chart2', screenOptions, {
            fullWidth: true,
            width: '96%',
            showLine: true,
            axisX: {
              showLabel: true,
              offset: 15
            },
            axisY: {
              showGrid: false,
              showLabel: false,
              offset: 23
            }
          });

          var seq = 0;

          chart_re.on('created', function () {
            seq = 0;
          });

          chart_re.on('draw', function (data) {
            if (data.type === 'point') {
              seq++;

              data.element.animate({
                x1: {
                  from: data.x - 50,
                  to: data.x,
                  begin: seq * 80,
                  dur: 800,
                  easing: Chartist.Svg.Easing.easeOutQuint
                },
                opacity: {
                  from: 0,
                  to: 1,
                  begin: seq * 80,
                  dur: 300,
                }
              });
            }
          });

          chart_re.on('created', function () {
            if (window.__exampleAnimateTimeout) {
              clearTimeout(window.__exampleAnimateTimeout);
              window.__exampleAnimateTimeout = null;
            }
            setTimeout(function () {
              var termynal = new Termynal('#termynal2')
            }, 4100);
            window.__exampleAnimateTimeout = setTimeout(chart_re.update.bind(chart_re), 8070);
          });

        }, 3100);

      }
    }), e.reveal(".bubble-5", {
      duration: 1e3,
      scale: .95,
      easing: "cubic-bezier(0.5, -0.01, 0, 1.005)",
      interval: 15,
      viewFactor: 1.0
    }), e.reveal(".feature", {
      duration: 600,
      distance: "40px",
      easing: "cubic-bezier(0.5, -0.01, 0, 1.005)",
      interval: 100,
      origin: "bottom",
      viewFactor: .5
    }), e.reveal('.clients li', {
      delay: 300,
      duration: 1000,
      rotate: {
        y: 50
      },
      easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)',
      interval: 150
    }), e.reveal('.testimonial, .pricing-table, .pricing-faqs', {
      duration: 600,
      distance: '40px',
      easing: 'cubic-bezier(0.215, 0.61, 0.355, 1)',
      interval: 100,
      origin: 'bottom',
      viewFactor: 0.2
    })
  }
}();

function setCookie(name,value,days) {
  var expires = "";
  if (days) {
      var date = new Date();
      date.setTime(date.getTime() + (days*24*60*60*1000));
      expires = "; expires=" + date.toUTCString();
  }
  document.cookie = name + "=" + (value || "")  + expires + "; path=/";
}
function getCookie(name) {
  var nameEQ = name + "=";
  var ca = document.cookie.split(';');
  for(var i=0;i < ca.length;i++) {
      var c = ca[i];
      while (c.charAt(0)==' ') c = c.substring(1,c.length);
      if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
  }
  return null;
}
function eraseCookie(name) {   
  document.cookie = name+'=; Max-Age=-99999999;';  
}

// validate form
if($('.validate-form').length) {
  $('.validate-form').each(function() {
      $(this).validate();
    });
}

if (window.innerWidth >= 428 && getCookie('privacyPolicy') == null) {
$('#cookie').terminal(function(cmd, term) {
  setCookie('privacyPolicy','1', 30);
  if (cmd == 'help') {
    term.echo("available commands are [[;#FFF;]man cookie], [[;#FFF;]exit]");
  } else if (cmd == 'test') {
    term.push(function(command, term) {
      if (command == 'help') {
        term.echo('type "ping" it will display "pong"');
      } else if (command == 'ping') {
        term.echo('pong');
      } else {
        term.echo('unknown command "' + command + '"');
      }
    }, {
      prompt: 'test> ',
      name: 'test'});
  }  else if (cmd == 'exit') {
    term.destroy();
  } else if (cmd == "man" || cmd == "man cookie") {
    term.echo("We use common internet technologies, such as cookies\nand web server logs. This is stuff we collect from\neverybody, whether they have an account or not.\n\nThe information we collect about all visitors to our\nwebsite includes the visitorâ€™s browser type, language\npreference, referring site, additional websites\nrequested, and the date and time of each visitor\nrequest.");
    } else if (cmd == "ls") {
      term.echo("easteregg/");
      } else if (cmd == "cd" || cmd == "cd .." || cmd == "cd .") {
        term.push(function(command, term) {
          if (command == 'ls') {
            term.echo('discount.txt');
          } else if (command == 'cd' || command == 'cd ..') {
            term.pop();
          } else if (command == 'cat discount.txt') {
            term.echo('30% discount code: 13DFGki9');
          } else {
            term.echo('unknown command "' + command + '"');
          }
        }, {
          prompt: "> [[;#fee050;]ultrasuperuser]$ ",
          name: 'easteregg'});
      } else if (cmd == "cd easteregg" || cmd == "cd easteregg/" || cmd == "./easteregg/" || cmd == "./easteregg") {
          term.push(function(command, term) {
            if (command == 'ls') {
              term.echo('discount.txt');
            } else if (command == 'cd' || command == 'cd ..') {
              term.pop();
            } else if (command == 'cat discount.txt') {
              term.echo('30% discount code: 13DFGki9');
            } else {
              term.echo('unknown command "' + command + '"');
            }
          }, {
            prompt: "> [[;#fee050;]MÃ¶bius/easteregg]$ ",
            name: 'easteregg'});
        } else {
          term.echo("unknow command " + cmd);
        }
      }, {
        height: 170,
        width: 380,
        greetings: "Cookies help us improve our web content and deliver \npersonalised experience. By using this website, you\nagree to our use of cookies. \n\nType `[[;#FFF;]man cookie]` to learn more or `[[;#FFF;]exit]` to close\nthis prompt.\n \n",
        name: "cookie",
        prompt: "> [[;#fee050;]MÃ¶bius]$ ",
        clear: false,
        exit: false,
        outputLimit: -1,
        enabled: true
      });
    } else {
      $(".close-button").remove()
    }

// Accordion component
const accordionEl = document.getElementsByClassName('accordion-title')

if (accordionEl.length) {
  for (let i = 0; i < accordionEl.length; i++) {
    accordionEl[i].addEventListener('click', function () {
      this.parentNode.classList.toggle('is-open')
      const panel = this.nextElementSibling
      if (panel.style.maxHeight) {
        panel.style.maxHeight = null
      } else {
        panel.style.maxHeight = `${panel.scrollHeight}px`
      }
    })
  }
}